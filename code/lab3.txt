# lab3.txt
#
# Copyright 2018-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# prerequisite is to have run lab2.txt instructions first

# From lab2.txt ... don't need to repeat unless coming back into a new terminal window since lab1

# If you seek to do this via CLI, please complete the following tasks in the AWS Console:
# 1. Create a new IAM Role
#   a. Go to IAM Roles > New Role
#   b. Choose the "EC2" service that will use the role > Next
#   c. Add the "AdministratorAccess" policy > Next > Next
#   d. Name the new role "Cloud9Admin"
# 2. Attach the role to the EC2 instance running Cloud9
#   a. Go to EC2
#   b. Check the box next to the EC2 instance for your Cloud9
#   c. Click the "Actions" button > "Instance Settings" > "Attach/Replace IAM Role"
#   d. Choose the new "Cloud9Admin" role > Apply
# 3. Disable Cloud9 Temporary Credentials
#   a. From inside Cloud9, choose "AWS Cloud9" menu (top left next to File)
#   b. "AWS SETTINGS" > "Credentials" section
#   c. Turn Off "AWS managed temporary credentials:"

# CHANGE THIS LINE TO YOUR NAME AND FAV COLOR

THING_NAME=LastNameFavoriteColor

# letâ€™s work in our workshop folder
cd ~/environment/aws-iot-core-workshop/code

# ------------------------------------------
# LAB 3 - IoT Rules Setup
# ------------------------------------------
ROLE_NAME=${THING_NAME}_SNS_ROLE
SNS_ARN=$(jq -r .TopicArn < sns-topic-create.out)
echo ${SNS_ARN}

PERM_POLICY_NAME="${THING_NAME}_SNS_POLICY"
PERM_POLICY_JSON=$(cat <<EOJ1
{
    "Version": "2012-10-17",
    "Statement": {
        "Effect": "Allow",
        "Action": "sns:Publish",
        "Resource": "${SNS_ARN}"
    }
}
EOJ1
)

RESPONSE=$(aws iam create-policy --policy-name ${PERM_POLICY_NAME} --policy-document "${PERM_POLICY_JSON}")
echo ${RESPONSE}

PERM_POLICY_ARN=$(echo ${RESPONSE} | jq -r .Policy.Arn)
echo ${PERM_POLICY_ARN}

TRUST_POLICY_JSON=$(cat <<EOJ2
{
  "Version": "2012-10-17",
  "Statement": [
    {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": {
            "Service": "iot.amazonaws.com"
        }
    }
  ]
}
EOJ2
)
echo ${TRUST_POLICY_JSON}

RESPONSE=$(aws iam create-role --role-name ${ROLE_NAME} --assume-role-policy-document "${TRUST_POLICY_JSON}")
echo $RESPONSE
ROLE_ARN=$(echo ${RESPONSE} | jq -r .Role.Arn)
echo ${ROLE_ARN}

# attached policy to role
RESPONSE=$(aws iam attach-role-policy --role-name ${ROLE_NAME} --policy-arn ${PERM_POLICY_ARN})
echo ${RESPONSE}

# dashboard update rule
RULE_NAME=${THING_NAME}_Dashboard_Update
TOPIC_RULE_PAYLOAD=$(cat <<EOR1
{
    "sql": "SELECT * FROM '\$aws/events/presence/connected/+'",
    "description": "This rule will look for connect messages on the lifecycle of your thing.",
    "ruleDisabled": false,
    "awsIotSqlVersion": "2016-03-23",
    "actions": [
        {
            "sns": {
                "targetArn": "${SNS_ARN}",
                "roleArn": "${ROLE_ARN}",
                "messageFormat": "RAW"
            }
        }
    ]
}
EOR1
)
echo $TOPIC_RULE_PAYLOAD

aws iot create-topic-rule --rule-name ${RULE_NAME} --topic-rule-payload "${TOPIC_RULE_PAYLOAD}"

# shadow update rule
RULE_NAME=${THING_NAME}_Shadow_Update
TOPIC_RULE_PAYLOAD=$(cat <<EOR2
{
    "sql": "SELECT *, clientid() as thingName FROM '\$aws/things/+/shadow/update'",
    "description": "This rule will look for shadow updates from your thing.",
    "ruleDisabled": false,
    "awsIotSqlVersion": "2016-03-23",
    "actions": [
        {
            "sns": {
                "targetArn": "${SNS_ARN}",
                "roleArn": "${ROLE_ARN}",
                "messageFormat": "RAW"
            }
        }
    ]
}
EOR2
)
echo $TOPIC_RULE_PAYLOAD

aws iot create-topic-rule --rule-name ${RULE_NAME} --topic-rule-payload "${TOPIC_RULE_PAYLOAD}"
